name: Windows

on:
  - push
  - pull_request

jobs:
  build:
    runs-on: ${{ matrix.env.os }}
    env:
      VERSION: 1.4.2
    strategy:
      matrix:
        env:
          - name: Windows
            os: windows-2019

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checking out the code
        uses: actions/checkout@v2

      - name: Install Qt
        uses: jurplel/install-qt-action@v2.13.2
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        timeout-minutes: 10
        with:
          version: 5.15.2
          target: desktop
          host: windows
          install-deps: true
          modules: 'qtwebengine'
          arch: win64_msvc2019_64

      - name: Install dependencies
        run: choco install jom -y

      - name: Store branch
        id: vars
        shell: bash
        run: echo ::set-output name=short_ref::${GITHUB_REF#refs/*/}

      - name: Build GitQlient
        run: |
          # Setup VS compiler
          cmd.exe /c "call `"C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat`" && set > %temp%\vcvars.txt"
          Get-Content "$env:temp\vcvars.txt" | Foreach-Object { if ($_ -match "^(.*?)=(.*)$") { Set-Content "env:\$($matches[1])" $matches[2] } }
          qmake GitQlient.pro VERSION=${{env.VERSION}}
          jom -j2

      - name: Prune previous runs
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const days_to_expiration = 30;
            const ms_in_day = 86400000;
            const now = Date.now();
            const pages = 5;

            // we don't want to prune old runs from test.yml
            // because we track the duration of runs over time

            const workflows = [
              'windows.yml'
            ]

            let runs_to_delete = [];

            for (const workflow of workflows) {
              for (let page = 0; page < pages; page += 1) {
                let response = await github.actions.listWorkflowRuns({
                  owner: context.repo.owner,
                  page: page,
                  per_page: 100,
                  repo: context.repo.repo,
                  workflow_id: workflow
                });

                if (response.data.workflow_runs.length > 0) {
                  for (const run of response.data.workflow_runs) {
                    if (run.head_branch == "${{ steps.vars.outputs.short_ref }}" && run.head_sha != "${GITHUB_SHA}") {
                      runs_to_delete.push([run.id, run.name]);
                    }
                  }
                }
              }
            }

            for (const run of runs_to_delete) {
              console.log(`Run id ${run[0]} of '${run[1]}' is older than ${days_to_expiration} days. Deleting...`);
              try {
                await github.actions.deleteWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run[0]
                });
              } catch (error) {
                // ignore errors
              }
            }
